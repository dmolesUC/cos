package suite

import (
	"fmt"
	"math"
	. "unicode"
)

var UnicodeInvalid = map[string]*RangeTable{
	"Non-Character":      NonCharacter,
	"UTF8 Invalid Bytes": UTF8InvalidBytes,
}

var UTF8InvalidSequences = func() map[string][]string {
	byLength := map[int][]string{}
	for _, bb := range UTF8InvalidByteSequences {
		byLength[len(bb)] = append(byLength[len(bb)], string(bb))
	}
	result := map[string][]string{}
	for l, s := range byLength {
		caseName := fmt.Sprintf("%d byte", l)
		if l > 1 {
			caseName = caseName + "s"
		}
		result[caseName] = s
	}
	return result
}()

var UTF8InvalidByteSequences = func() [][]byte {
	result := [][]byte{
		// length 1 invalid sequences
		{0xff},
		{0x80},
		// length 2 invalid sequences
		{0xc1, 0x80},
		{0xe0, 0x80},
		{0xc1, 0xbf},
		{0xe0, 0xbf},
		{0xc2, 0x7f},
		{0xc2, 0xc0},
		{0xdf, 0x7f},
		{0xdf, 0xc0},
		// length 3 invalid sequences
		{0xdf, 0xa0, 0x80},
		{0xdf, 0xa0, 0xbf},
		{0xdf, 0xbf, 0x80},
		{0xdf, 0xbf, 0xbf},
		{0xe0, 0x9f, 0x80},
		{0xe0, 0xc0, 0x80},
		{0xe0, 0x9f, 0xbf},
		{0xe0, 0xc0, 0xbf},
		{0xe0, 0xa0, 0x7f},
		{0xe0, 0xa0, 0xc0},
		{0xe0, 0xbf, 0x7f},
		{0xe0, 0xbf, 0xc0},
		{0xe1, 0x7f, 0x80},
		{0xe1, 0xc0, 0x80},
		{0xe1, 0x7f, 0xbf},
		{0xe1, 0xc0, 0xbf},
		{0xec, 0x7f, 0x80},
		{0xec, 0xc0, 0x80},
		{0xec, 0x7f, 0xbf},
		{0xec, 0xc0, 0xbf},
		{0xe1, 0x80, 0x7f},
		{0xe1, 0x80, 0xc0},
		{0xe1, 0xbf, 0x7f},
		{0xe1, 0xbf, 0xc0},
		{0xec, 0x80, 0x7f},
		{0xec, 0x80, 0xc0},
		{0xec, 0xbf, 0x7f},
		{0xec, 0xbf, 0xc0},
		{0xed, 0x7f, 0x80},
		{0xed, 0xa0, 0x80},
		{0xed, 0x7f, 0xbf},
		{0xed, 0xa0, 0xbf},
		{0xed, 0x80, 0x7f},
		{0xed, 0x80, 0xc0},
		{0xed, 0x9f, 0x7f},
		{0xed, 0x9f, 0xc0},
		{0xf0, 0x80, 0x80},
		{0xf0, 0x80, 0xbf},
		{0xf0, 0xbf, 0x80},
		{0xf0, 0xbf, 0xbf},
		{0xee, 0x7f, 0x80},
		{0xee, 0xc0, 0x80},
		{0xee, 0x7f, 0xbf},
		{0xee, 0xc0, 0xbf},
		{0xef, 0x7f, 0x80},
		{0xef, 0xc0, 0x80},
		{0xef, 0x7f, 0xbf},
		{0xef, 0xc0, 0xbf},
		{0xee, 0x80, 0x7f},
		{0xee, 0x80, 0xc0},
		{0xee, 0xbf, 0x7f},
		{0xee, 0xbf, 0xc0},
		{0xef, 0x80, 0x7f},
		{0xef, 0x80, 0xc0},
		{0xef, 0xbf, 0x7f},
		{0xef, 0xbf, 0xc0},
		// length 4 invalid sequences
		{0xef, 0x90, 0x80, 0x80},
		{0xef, 0x90, 0x80, 0xbf},
		{0xef, 0x90, 0xbf, 0x80},
		{0xef, 0x90, 0xbf, 0xbf},
		{0xef, 0xbf, 0x80, 0x80},
		{0xef, 0xbf, 0x80, 0xbf},
		{0xef, 0xbf, 0xbf, 0x80},
		{0xef, 0xbf, 0xbf, 0xbf},
		{0xf0, 0x8f, 0x80, 0x80},
		{0xf0, 0xc0, 0x80, 0x80},
		{0xf0, 0x8f, 0x80, 0xbf},
		{0xf0, 0xc0, 0x80, 0xbf},
		{0xf0, 0x8f, 0xbf, 0x80},
		{0xf0, 0xc0, 0xbf, 0x80},
		{0xf0, 0x8f, 0xbf, 0xbf},
		{0xf0, 0xc0, 0xbf, 0xbf},
		{0xf0, 0x90, 0x7f, 0x80},
		{0xf0, 0x90, 0xc0, 0x80},
		{0xf0, 0x90, 0x7f, 0xbf},
		{0xf0, 0x90, 0xc0, 0xbf},
		{0xf0, 0xbf, 0x7f, 0x80},
		{0xf0, 0xbf, 0xc0, 0x80},
		{0xf0, 0xbf, 0x7f, 0xbf},
		{0xf0, 0xbf, 0xc0, 0xbf},
		{0xf0, 0x90, 0x80, 0x7f},
		{0xf0, 0x90, 0x80, 0xc0},
		{0xf0, 0x90, 0xbf, 0x7f},
		{0xf0, 0x90, 0xbf, 0xc0},
		{0xf0, 0xbf, 0x80, 0x7f},
		{0xf0, 0xbf, 0x80, 0xc0},
		{0xf0, 0xbf, 0xbf, 0x7f},
		{0xf0, 0xbf, 0xbf, 0xc0},
		{0xf1, 0x7f, 0x80, 0x80},
		{0xf1, 0xc0, 0x80, 0x80},
		{0xf1, 0x7f, 0x80, 0xbf},
		{0xf1, 0xc0, 0x80, 0xbf},
		{0xf1, 0x7f, 0xbf, 0x80},
		{0xf1, 0xc0, 0xbf, 0x80},
		{0xf1, 0x7f, 0xbf, 0xbf},
		{0xf1, 0xc0, 0xbf, 0xbf},
		{0xf3, 0x7f, 0x80, 0x80},
		{0xf3, 0xc0, 0x80, 0x80},
		{0xf3, 0x7f, 0x80, 0xbf},
		{0xf3, 0xc0, 0x80, 0xbf},
		{0xf3, 0x7f, 0xbf, 0x80},
		{0xf3, 0xc0, 0xbf, 0x80},
		{0xf3, 0x7f, 0xbf, 0xbf},
		{0xf3, 0xc0, 0xbf, 0xbf},
		{0xf1, 0x80, 0x7f, 0x80},
		{0xf1, 0x80, 0xc0, 0x80},
		{0xf1, 0x80, 0x7f, 0xbf},
		{0xf1, 0x80, 0xc0, 0xbf},
		{0xf1, 0xbf, 0x7f, 0x80},
		{0xf1, 0xbf, 0xc0, 0x80},
		{0xf1, 0xbf, 0x7f, 0xbf},
		{0xf1, 0xbf, 0xc0, 0xbf},
		{0xf3, 0x80, 0x7f, 0x80},
		{0xf3, 0x80, 0xc0, 0x80},
		{0xf3, 0x80, 0x7f, 0xbf},
		{0xf3, 0x80, 0xc0, 0xbf},
		{0xf3, 0xbf, 0x7f, 0x80},
		{0xf3, 0xbf, 0xc0, 0x80},
		{0xf3, 0xbf, 0x7f, 0xbf},
		{0xf3, 0xbf, 0xc0, 0xbf},
		{0xf1, 0x80, 0x80, 0x7f},
		{0xf1, 0x80, 0x80, 0xc0},
		{0xf1, 0x80, 0xbf, 0x7f},
		{0xf1, 0x80, 0xbf, 0xc0},
		{0xf1, 0xbf, 0x80, 0x7f},
		{0xf1, 0xbf, 0x80, 0xc0},
		{0xf1, 0xbf, 0xbf, 0x7f},
		{0xf1, 0xbf, 0xbf, 0xc0},
		{0xf3, 0x80, 0x80, 0x7f},
		{0xf3, 0x80, 0x80, 0xc0},
		{0xf3, 0x80, 0xbf, 0x7f},
		{0xf3, 0x80, 0xbf, 0xc0},
		{0xf3, 0xbf, 0x80, 0x7f},
		{0xf3, 0xbf, 0x80, 0xc0},
		{0xf3, 0xbf, 0xbf, 0x7f},
		{0xf3, 0xbf, 0xbf, 0xc0},
		{0xf5, 0x80, 0x80, 0x80},
		{0xf5, 0x80, 0x80, 0xbf},
		{0xf5, 0x80, 0xbf, 0x80},
		{0xf5, 0x80, 0xbf, 0xbf},
		{0xf5, 0x8f, 0x80, 0x80},
		{0xf5, 0x8f, 0x80, 0xbf},
		{0xf5, 0x8f, 0xbf, 0x80},
		{0xf5, 0x8f, 0xbf, 0xbf},
		{0xf4, 0x7f, 0x80, 0x80},
		{0xf4, 0x90, 0x80, 0x80},
		{0xf4, 0x7f, 0x80, 0xbf},
		{0xf4, 0x90, 0x80, 0xbf},
		{0xf4, 0x7f, 0xbf, 0x80},
		{0xf4, 0x90, 0xbf, 0x80},
		{0xf4, 0x7f, 0xbf, 0xbf},
		{0xf4, 0x90, 0xbf, 0xbf},
		{0xf4, 0x80, 0x7f, 0x80},
		{0xf4, 0x80, 0xc0, 0x80},
		{0xf4, 0x80, 0x7f, 0xbf},
		{0xf4, 0x80, 0xc0, 0xbf},
		{0xf4, 0x8f, 0x7f, 0x80},
		{0xf4, 0x8f, 0xc0, 0x80},
		{0xf4, 0x8f, 0x7f, 0xbf},
		{0xf4, 0x8f, 0xc0, 0xbf},
		{0xf4, 0x80, 0x80, 0x7f},
		{0xf4, 0x80, 0x80, 0xc0},
		{0xf4, 0x80, 0xbf, 0x7f},
		{0xf4, 0x80, 0xbf, 0xc0},
		{0xf4, 0x8f, 0x80, 0x7f},
		{0xf4, 0x8f, 0x80, 0xc0},
		{0xf4, 0x8f, 0xbf, 0x7f},
		{0xf4, 0x8f, 0xbf, 0xc0},
	}
	return result
}()

var (
	NonCharacter     = _NonCharacter     // Code points permanently reserved for internal use: https://www.unicode.org/faq/private_use.html#noncharacters
	UTF8InvalidBytes = _UTF8InvalidBytes // Bytes that must never appear in a valid UTF8 sequence
)

var _NonCharacter = func() *RangeTable {
	rt := RangeTable{}
	rt.R16 = append(rt.R16, Range16{Lo: 0xfdd0, Hi: 0xfdef, Stride: 1})
	for i := uint32(0); i <= 0x100000; i += 0x10000 {
		cp0, cp1 := i+0xfffe, i+0xffff
		if cp1 < math.MaxUint16 {
			r16 := Range16{Lo: uint16(cp0), Hi: uint16(cp1), Stride: 1}
			rt.R16 = append(rt.R16, r16)
		} else {
			r32 := Range32{Lo: cp0, Hi: cp1, Stride: 1}
			rt.R32 = append(rt.R32, r32)
		}
	}
	return &rt
}()

var _UTF8InvalidBytes = func() *RangeTable {
	return &RangeTable{
		R16: []Range16{
			{Lo: 0xc0, Hi: 0xc1, Stride: 1},
			{Lo: 0xf5, Hi: 0xfd, Stride: 1},
		},
		LatinOffset: 2,
	}
}()
